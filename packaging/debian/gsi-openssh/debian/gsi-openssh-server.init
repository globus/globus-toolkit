#!/bin/bash
#
# gsisshd		Start up the GSI OpenSSH server daemon
#
# chkconfig: - 55 25
# description: SSH is a protocol for secure remote shell access. \
#              This service starts up the OpenSSH server daemon.
#
# processname: gsisshd
# config: /etc/gsissh/ssh_host_key
# config: /etc/gsissh/ssh_host_key.pub
# config: /etc/gsissh/ssh_random_seed
# config: /etc/gsissh/sshd_config
# pidfile: /var/run/gsisshd.pid

### BEGIN INIT INFO
# Provides: gsisshd
# Required-Start: $local_fs $network $syslog
# Required-Stop: $local_fs $syslog
# Should-Start: $syslog
# Should-Stop: $network $syslog
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: Start up the GSI OpenSSH server daemon
# Description:       SSH is a protocol for secure remote shell access.
#		     This service starts up the GSI OpenSSH server daemon.
### END INIT INFO

# source function library
. /lib/lsb/init-functions

RETVAL=0
prog="gsisshd"
lockfile=/var/lock/subsys/$prog

KEYGEN=/usr/bin/gsissh-keygen
SSHD=/usr/sbin/gsisshd
RSA1_KEY=/etc/gsissh/ssh_host_key
RSA_KEY=/etc/gsissh/ssh_host_rsa_key
DSA_KEY=/etc/gsissh/ssh_host_dsa_key
ECDSA_KEY=/etc/gsissh/ssh_host_ecdsa_key
PID_FILE=/var/run/gsisshd.pid

# pull in default settings
[ -f /etc/default/gsi-openssh-server ] && . /etc/default/gsi-openssh-server

runlevel=$(set -- $(runlevel); eval "echo \$$#" )

do_rsa1_keygen() {
	if [ ! -s $RSA1_KEY ]; then
		rm -f $RSA1_KEY
		if test ! -f $RSA1_KEY && $KEYGEN -q -t rsa1 -f $RSA1_KEY -C '' -N '' >&/dev/null; then
			chmod 600 $RSA1_KEY
			chmod 644 $RSA1_KEY.pub
			if [ -x /sbin/restorecon ]; then
			    /sbin/restorecon $RSA1_KEY.pub
			fi
			log_success_msg "SSH1 RSA key generation"
		else
			log_failure_msg "SSH1 RSA key generation"
			exit 1
		fi
	fi
}

do_rsa_keygen() {
	if [ ! -s $RSA_KEY ]; then
		rm -f $RSA_KEY
		if test ! -f $RSA_KEY && $KEYGEN -q -t rsa -f $RSA_KEY -C '' -N '' >&/dev/null; then
			chmod 600 $RSA_KEY
			chmod 644 $RSA_KEY.pub
			if [ -x /sbin/restorecon ]; then
			    /sbin/restorecon $RSA_KEY.pub
			fi
			log_success_msg "SSH2 RSA key generation"
			echo
		else
			log_failure_msg "SSH2 RSA key generation"
			echo
			exit 1
		fi
	fi
}

do_dsa_keygen() {
	if [ ! -s $DSA_KEY ]; then
		rm -f $DSA_KEY
		if test ! -f $DSA_KEY && $KEYGEN -q -t dsa -f $DSA_KEY -C '' -N '' >&/dev/null; then
			chmod 600 $DSA_KEY
			chmod 644 $DSA_KEY.pub
			if [ -x /sbin/restorecon ]; then
			    /sbin/restorecon $DSA_KEY.pub
			fi
			log_success_msg "SSH2 DSA key generation"
			echo
		else
			log_failure_msg "SSH2 DSA key generation"
			echo
			exit 1
		fi
	fi
}

do_ecdsa_keygen() {
	if [ ! -s $ECDSA_KEY ]; then
		rm -f $ECDSA_KEY
		if test ! -f $ECDSA_KEY && $KEYGEN -q -t ecdsa -f $ECDSA_KEY -C '' -N '' >&/dev/null; then
			chmod 600 $ECDSA_KEY
			chmod 644 $ECDSA_KEY.pub
			if [ -x /sbin/restorecon ]; then
			    /sbin/restorecon $ECDSA_KEY.pub
			fi
			log_success_msg "SSH2 ECDSA key generation"
			echo
		else
			log_failure_msg "SSH2 ECDSA key generation"
			echo
			exit 1
		fi
	fi

}

do_restart_sanity_check()
{
	$SSHD -t
	RETVAL=$?
	if [ $RETVAL -ne  0 ]; then
		log_failure_msg "Configuration file or keys are invalid"
		echo
	fi
}

start()
{
	[ -x $SSHD ] || exit 5
	[ -f /etc/gsissh/sshd_config ] || exit 6
	# Create keys if necessary
	# - Not necessary if running with keyex only
	if [ "x${AUTOCREATE_SERVER_KEYS}" != xNO ]; then
		do_rsa_keygen
		if [ "x${AUTOCREATE_SERVER_KEYS}" != xRSAONLY ]; then
			do_rsa1_keygen
			do_dsa_keygen
			do_ecdsa_keygen
		fi
	 fi

	start_daemon -p /var/run/gsisshd.pid $SSHD $OPTIONS
	RETVAL=$?
	if [ $RETVAL -eq 0 ]; then
	    log_success_msg "Started $SSHD"
	else
	    log_failure_msg "Failed to start $SSHD"
	fi
	return $RETVAL
}

stop()
{
    	killproc $SSHD
	RETVAL=$?
	# if we are in halt or reboot runlevel kill all running sessions
	# so the TCP connections are closed cleanly
	if [ "x$runlevel" = x0 -o "x$runlevel" = x6 ] ; then
	    trap '' TERM
	    killall $prog 2>/dev/null
	    trap TERM
	fi
	if [ $RETVAL -eq 0 ]; then
	    log_success_msg "Stopped $SSHD"
	else
	    log_failure_msg "Failed to stop $SSHD"
	fi
	return $RETVAL
}

reload()
{
	killproc $SSHD -HUP
	RETVAL=$?
	if [ $RETVAL -eq 0 ]; then
	    log_success_msg "Reloaded $prog"
	else
	    log_failure_msg "Failed to reload $prog"
	fi

	return $RETVAL
}

restart() {
	stop
	start
}

force_reload() {
	restart
}

rh_status() {
	pidofproc "$SSH"
}

rh_status_q() {
	pidofproc "$SSH" > /dev/null
}

case "$1" in
	start)
		rh_status_q && exit 0
		start
		;;
	stop)
		if ! rh_status_q; then
			exit 0
		fi
		stop
		;;
	restart)
		restart
		;;
	reload)
		rh_status_q || exit 7
		reload
		;;
	force-reload)
		force_reload
		;;
	condrestart|try-restart)
		rh_status_q || exit 0
		do_restart_sanity_check
		if [ $RETVAL -eq 0 ] ; then
			stop
			# avoid race
			sleep 3
			start
		else
			RETVAL=6
		fi
		;;
	status)
		rh_status
		RETVAL=$?
		if [ $RETVAL -eq 3 ] ; then
			RETVAL=2
		fi
		;;
	*)
		echo $"Usage: $0 {start|stop|restart|reload|force-reload|condrestart|try-restart|status}"
		RETVAL=2
esac
exit $RETVAL
