#!/usr/bin/make -f
# -*- makefile -*-

DEB_HOST_GNU_TYPE  ?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)
DEB_BUILD_GNU_TYPE ?= $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)

ifneq (,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
NUMJOBS = $(patsubst parallel=%,%,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
MAKEFLAGS += -j$(NUMJOBS)
endif

include /usr/share/quilt/quilt.make

name = myproxy
_name = myproxy
version = 6.0rc1
soname = 5

INSTALLDIR = $(CURDIR)/debian/tmp
DEB_HOST_MULTIARCH ?= $(shell dpkg-architecture -qDEB_HOST_MULTIARCH)

_prefix = /usr
_sysconfdir = /etc
_bindir = $(_prefix)/bin
_sbindir = $(_prefix)/sbin
_includedir = $(_prefix)/include
_libdir = $(_prefix)/lib/$(DEB_HOST_MULTIARCH)
_datadir = $(_prefix)/share
_mandir = $(_datadir)/man
_docdir = $(_datadir)/doc

DEB_BUILD_ARCH_CPU ?= $(shell dpkg-architecture -qDEB_BUILD_ARCH_CPU)

sed: sed-stamp
	:

sed-stamp: $(QUILT_STAMPFN)
	dh_testdir

	touch $@

unsed: cleanup
	dh_testdir

	rm -f sed-stamp

configure: configure-stamp
	:

configure-stamp: sed-stamp
	dh_testdir

	autoreconf -if

	for f in config.sub config.guess ; do \
	  if [ -e /usr/share/misc/$$f -a ! -e $$f.dist ] ; then \
	    mv $$f $$f.dist ; \
	    cp -f /usr/share/misc/$$f $$f ; \
	  fi ; \
	done
	./configure \
 	   --host=$(DEB_HOST_GNU_TYPE) \
	   --build=$(DEB_BUILD_GNU_TYPE) \
	   --prefix=$(_prefix) \
	   --mandir='$(_datadir)/man' \
	   --docdir='$(_docdir)/lib$(name)-dev' \
	   --includedir='$(_includedir)/globus' \
	   --datadir='$(_datadir)' \
	   --libdir='$(_libdir)' \
	   --libexecdir='$(_datadir)/globus' \
	   --disable-static

	touch $@

build: build-stamp
	:

build-stamp: configure-stamp
	dh_testdir
	$(MAKE) LIBS="-lbsd -lpam -ldl -lssl -lcrypto"
ifeq (,$(filter nocheck,$(DEB_BUILD_OPTIONS)))
	$(MAKE) check
endif
	touch $@

unpatch: unsed

clean: unpatch
	:

cleanup:
	dh_testdir
	dh_testroot

	if [ -r Makefile ] ; then $(MAKE) distclean ; fi

	for f in config.sub config.guess ; do \
	  if [ -e $$f.dist ] ; then \
	    mv $$f.dist $$f ; \
	  fi ; \
	done

	# Remove autogenerated files

	rm -f aclocal.m4
	rm -f configure
	rm -f compile
	rm -f config.guess
	rm -f config.sub
	rm -f depcomp
	rm -f install-sh
	rm -f ltmain.sh
	rm -f missing
	rm -f mkinstalldirs
	rm -f m4/*

	rm -rf autom4te.cache
	rm -rf doc
	rm -f config.h.in

	find . -name Makefile.in -exec rm {} ';'

	rm -f build-stamp configure-stamp

	dh_clean debian/*.install

install: build-stamp
	dh_testdir
	dh_testroot
	dh_clean -k

	$(MAKE) install DESTDIR=$(INSTALLDIR)

	# Remove .la files
	rm -f $(INSTALLDIR)/$(_libdir)/lib*.la

	# Remove myproxy-server-setup since the deb will perform the setup
	rm $(INSTALLDIR)/$(_sbindir)/myproxy-server-setup

	# Put example scripts and documentation in package doc dir
	mkdir -p $(INSTALLDIR)/$(_docdir)/$(name)/extras
	for FILE in login.html myproxy-accepted-credentials-mapapp \
	    myproxy-cert-checker myproxy-certificate-mapapp \
	    myproxy-certreq-checker myproxy-crl.cron myproxy.cron \
	    myproxy-get-delegation.cgi myproxy-get-trustroots.cron \
	    myproxy-passphrase-policy myproxy-revoke; do \
                mv $(INSTALLDIR)/$(_datadir)/$(name)/$$FILE \
			$(INSTALLDIR)/$(_docdir)/$(name)/extras/$$FILE; \
	done
	# Remove irrelevant example configuration files
	for FILE in etc.inetd.conf.modifications etc.init.d.myproxy.nonroot \
	    etc.services.modifications etc.xinetd.myproxy \
	    etc.init.d.myproxy; do \
                rm $(INSTALLDIR)/$(_datadir)/$(name)/$$FILE; \
	done
	for FILE in README INSTALL \
               LICENSE LICENSE.sasl LICENSE.netbsd LICENSE.pidfile \
               LICENSE.safefile LICENSE.pubcookie LICENSE.globus \
               VERSION PROTOCOL; do \
	    mv $(INSTALLDIR)/$(_datadir)/$(name)/$$FILE \
		$(INSTALLDIR)/$(_docdir)/$(name)/$$FILE; \
	done

	# Move default configuration for myproxy server into place... we'll
	# stick it in the $(name)-server.install file later
	mkdir -p $(INSTALLDIR)/etc
	mv $(INSTALLDIR)/$(_datadir)/$(name)/$(name)-server.config \
		$(INSTALLDIR)/etc/$(name)-server.config

	ls -1 debian/tmp$(_bindir)/*  debian/tmp$(_mandir)/man1/* \
		> debian/$(name).install
	ls -1 debian/tmp$(_libdir)/*.so.* > debian/lib$(name)$(soname).install
	ls -1 debian/tmp$(_libdir)/*.so \
	      debian/tmp$(_includedir)/globus/* \
		> debian/lib$(name)-dev.install
	ls -1 debian/tmp$(_sbindir)/myproxy-server \
	      debian/tmp$(_mandir)/man[58]/* \
	      debian/tmp$(_sysconfdir)/$(name)-server.config \
		| grep myproxy-server \
	        > debian/$(name)-server.install
	ls -1 debian/tmp$(_sbindir)/* \
	      debian/tmp$(_mandir)/man[58]/* \
		| grep -v myproxy-server \
	        > debian/$(name)-admin.install
	find debian/tmp$(_datadir)/$(name) \
		debian/tmp$(_docdir)/$(name) \
		-type f \
		> debian/lib$(name)-doc.install
	# Make myproxy.sysconfig into the myproxy-server package's default
	# file
	mkdir -p $(INSTALLDIR)/etc/default
	cp myproxy.sysconfig debian/myproxy-server.default
	echo "for myproxy_conf in /etc/myproxy.d/*; do if [ -r \$$myproxy_conf ] ; then . \$$myproxy_conf; fi done" >> debian/myproxy-server.default

	# Generate package filelists
	mkdir -p "debian/tmp/etc/grid-security/$(name)"
	echo "debian/tmp/etc/grid-security/$(name)" >> debian/$(name)-server.install

binary-indep:
	:

binary-arch: install
	dh_testdir
	dh_testroot
	mkdir -p debian/lib$(name)-doc$(_docdir)
	ln -s lib$(name)-dev debian/lib$(name)-doc$(_docdir)/lib$(name)-doc
	dh_installchangelogs
	dh_installdocs debian/README
	dh_install --fail-missing
	dh_installinit
	dh_installman
	dh_link
	dh_strip -X/bin/ -X/sbin/ --dbg-package=lib$(name)-dbg
	dh_strip -X/lib/ --dbg-package=$(name)-dbg
	dh_strip --dbg-package=myproxy-dbg
	dh_compress -X .tag
	dh_fixperms
	dh_perl
	dh_makeshlibs
	dh_installdeb
	dh_gencontrol
	dh_md5sums
	dh_builddeb

binary: binary-indep binary-arch
	:

.PHONY: build clean binary-indep binary-arch binary install configure
