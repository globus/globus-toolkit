#!/usr/bin/perl

use Getopt::Long;
use POSIX;
use Pod::Usage;
use Data::Dumper;
use File::Basename;
use strict;

my $topdir = dirname($0);
my $package;
my $verbose;
my $allpkgmeta = {};
my $gtreleaseuri = undef;
my $stage = undef;
my $changelog = undef;
my %changelogs;
my $prompt_for_changelog = undef;
my $git_changelog = undef;
my $bumprelease = undef;
my $new_release = undef;
my $dryrun = 0;
my $update;
my $help;
my %packagelist = ();
my $package_root = "http://www.globus.org/ftppub/gt6/packages";

sub parse_package
{
    my $package_dir = shift;
    my ($configure_script) = "$topdir/../$package_dir/configure";
    my @lines;
    my %values;

    print "Parsing $package_dir \n" if $verbose;
    open(my $configure, "<$configure_script");
    @lines = grep(/^(PACKAGE_NAME|PACKAGE_VERSION|AGE_VERSION|PACKAGE_DEPS)=/, <$configure>);
    foreach (@lines) {
        chomp;
        my ($var, $val) = split(/=/, $_, 2);
        $values{$var} = eval $val;
    }

    my $native_name = $values{PACKAGE_NAME};
    $native_name =~ tr/_/-/;
    my $deps = {};
    foreach my $dep (split(/\s*,\s*/, $values{PACKAGE_DEPS})) {
        $dep =~ m/\s*(\S+)\s+([<=>]+)\s+(\S+)/;
        my ($depn, $depop, $depver) = ($1, $2, $3);

        $deps->{$depn} = "$depop $depver";
    }

    my $soname = int($values{PACKAGE_VERSION}) - int($values{AGE_VERSION});

    if ($native_name eq 'myproxy') {
        $soname = 0; 
    }

    return {
        PACKAGE_DIR => $package_dir,
        TARBALL => $values{PACKAGE_NAME} . "-" . $values{PACKAGE_VERSION} . ".tar.gz",
        NATIVE_NAME => $native_name,
        VERSION => $values{PACKAGE_VERSION},
        SONAME => $soname,
        DEPS => $deps
    };
}

sub update_rpm($$)
{
    my ($pkgname, $allpackagemeta) = @_;
    my $package = $allpackagemeta->{$pkgname};
    my $version = $package->{VERSION};
    my $specfilename = "$topdir/fedora/$package->{NATIVE_NAME}.spec";

    if ($verbose) {print "Acting on $pkgname \n";}

    if (!open(FH, "+< $specfilename"))
    {
        print "Error opening: $specfilename\n";
        return;
    }

    # What we'll do is modify the line array of the specfile, replacing
    # version, release, changelog, and any globus dependencies which need
    # updating
    my @ARRAY = <FH>; 
    my $index;
    my $changelogindex;
    my $releaseindex;
    my $releaseversion;
    my $setreleaseversion;
    my $releasesuffix;
    my $specfile_changed = "";
    my $version_changed = 0;

    for ($index = 0; $index < $#ARRAY; $index++)
    {
        my $specline = $ARRAY[$index];

        if ($specline =~ m/^\s*Version:\s*(\d+\.\d+)/)
        {
            if ($1 ne $version)
            {
                $ARRAY[$index] = "Version:\t$version\n";
                $setreleaseversion = 1;
                $version_changed = 1;
            }
        }
        elsif ($specline =~ m/Release:\s*(\d+)(.*)/)
        {
            $releaseindex = $index;
            $releaseversion = $1;
            $releasesuffix = $2;
        }
        elsif ($specline =~ m/\%changelog/)
        {
            $changelogindex = $index;
        }
        elsif ($specline =~ m!Source:\s*http://(.*)/([^/]*)!)
        {
            if ($1 =~ m/www.globus.org/) {
                my $oldsrc = $2;
                my $newsrc = $package_root . "/" . $package->{TARBALL};
                if ($oldsrc ne $newsrc) {
                    $ARRAY[$index] = "Source:\t$newsrc\n";
                    $specfile_changed = 1;
                }
            }
        }
        elsif ($specline =~ m/(Requires:\s*(\S*)\s*)(>=\s*[0-9.]+)/)
        {
            # Kind of ugly here. What we do is see if the requirement package
            # name is a gpt dependency. We try some variations on the name
            # by stripping off common suffixes in the spec files. As long as
            # no gpt package names end with any of these suffixes, this should
            # work
            my $requirement = $2;
            my $requirever = $3;
            my $old_requirever = $3;
            my $base_requirement;
            my @specsuffixes = ('', '-clients', '-devel', '-libs',
                '-progs', '-server', '-setup-poll', '-setup-seg');

            $base_requirement = $requirement;
            $base_requirement =~ s/\%{\?_isa}//;

            for my $suffix (@specsuffixes)
            {
                if ($base_requirement =~ m/$suffix$/)
                {
                    my $new_base = $base_requirement;
                    $new_base =~ s/$suffix$//;

                    if (exists $package->{DEPS}->{$new_base})
                    {
                        $requirever = $package->{DEPS}->{$new_base};
                        last;
                    }
                }
            }
            if ($requirever ne $old_requirever)
            {
                print "Updating version $requirement from $old_requirever to $requirever\n" if ($verbose);
                $specline =~ s/(Requires:\s*\S+\s*>=\s*)[0-9.]+/$1$requirever/;
                $ARRAY[$index] = $specline;
                $specfile_changed = 1;
            }
        }
    }

    my $changelogstring;

    if ($git_changelog)
    {
        my %issues = ();
        my $pkgdatadir = $package->{PACKAGE_DIR};

        foreach (split(/\n/, `git log --format=oneline origin/globus_6_branch..HEAD -- $pkgdatadir`)) {
            $_ = (split(/ /, $_, 2))[1];
            $issues{$_} = 1;
        }
        $changelog = join("\n", sort(keys %issues), "");
        if ($changelog eq '')
        {
            $changelog = undef;
        }

    }

    if (!$dryrun)
    {
        if ($specfile_changed || $version_changed || $bumprelease)
        {
            if (!$changelog)
            {
                if ($changelogs{$pkgname})
                {
                    $changelogstring = "- " . join("\n- ", split(/\n/, $changelogs{$pkgname})) . "\n";
                }
                elsif ($prompt_for_changelog)
                {
                    print "Changelog entry for $pkgname [empty line to end]: ";
                    $changelogstring = '';

                    while (<>)
                    {
                        if ($_ eq "\n")
                        {
                            last;
                        }
                        $changelogstring .= "- $_";
                    }
                }

                if ($changelogstring eq '')
                {
                    $changelogstring = "- Updated version numbers\n";
                }
            }
            else
            {
                $changelogstring = "- " . join("\n- ", split(/\n/, $changelog)) . "\n";
            }
        }
    }

    if ($specfile_changed || $bumprelease)
    {
        $releaseversion++;
    }

    if ($setreleaseversion)
    {
        $releaseversion = $setreleaseversion;
    }

    if ($specfile_changed || $version_changed || $bumprelease)
    {
        $ARRAY[$changelogindex] = "%changelog\n* " . strftime('%a %b %d %Y', localtime) . " Globus Toolkit <support\@globus.org> - $version-$releaseversion\n$changelogstring\n";
        print "Spec file $specfilename has been updated\n";
    }

      $ARRAY[$releaseindex] = "Release:\t$releaseversion$releasesuffix\n";

    if (!$dryrun)
    {
        # Write back the spec file
        seek(FH,0,0) or die "Seeking: $!"; 
        print FH @ARRAY or die "Printing: $!"; 
        truncate(FH,tell(FH)) or die "Truncating: $!"; 
        if ($stage) {
            system("git add $specfilename");
        }
    }
    close(FH) or die "Closing: $!";
}

sub update_debian($$)
{
    my ($pkgname, $allpkgmeta, $changed) = @_;
    my $pkgmeta = $allpkgmeta->{$pkgname};

    if ($verbose) {print "Acting on files in $topdir/debian/$pkgname/debian\n";}

    $changed |= update_rules($pkgmeta);
    $changed |= update_control($pkgmeta, $allpkgmeta);
    $changed |= update_copyright($pkgmeta, $allpkgmeta);
    $changed |= check_if_version_is_different($pkgmeta);
    $changed |= check_if_debian_metadata_changed($pkgmeta);
    update_changelog($pkgmeta) if ($changed);
}

# Things to change in a control file:
# Package names:
#    There might be a package called lib$packagename$soname which might need
#    an soname update.
# Build Dependencies: 
#    This package might have a build dependency on a package whose version has
#    changed. The name might be mangled with the addition of a suffix:
#        -admin | -dbg | -dev | -doc | -progs | -server
#    or with prefix lib and suffix -dev
# Dependencies:
#    This package might have a runtime dependence on a package whose version has
#    changed. The name might be mangled with the addition of a suffix:
#        -admin | -dbg | -dev | -doc | -progs | -server
#    or with a prefix "lib" and suffix "-dev" or a prefix "lib" and suffix
#    "$soname"
# Description:
#    The description might contain references to lib PKGNAME SONAME in its
#    auto-generated description text
sub update_control
{
    my ($pkgmeta, $allpkgmeta) = @_;
    my $controlpath = "$topdir/debian/$pkgmeta->{NATIVE_NAME}/debian/control";
    my $soname = $pkgmeta->{SONAME};
    my $changed = 0;
    my $fd;
    my @old_control;
    my $in_description = 0;

    open($fd, "<$controlpath") || return 0;
    @old_control=<$fd>;
    close($fd);

    for my $line (@old_control)
    {
        chomp($line);
        if (($in_description || $line =~ m/^Description/) && $line ne '')
        {
            my $newline;
            $in_description = 1;
            $newline = $line;
            $newline =~ s/lib$pkgmeta->{NATIVE_NAME}([0-9]+)/lib$pkgmeta->{NATIVE_NAME}$pkgmeta->{SONAME}/g;

            if ($newline ne $line)
            {
                print "changed library version in $line\n" if ($verbose);
                $changed = 1;
                $line = $newline;
            }
        }
        elsif ($in_description && $line eq '')
        {
            $in_description = '';
        }
        elsif ($line =~ /^(Package:\s*lib$pkgmeta->{NATIVE_NAME})(\d+)$/)
        {
            my ($oldname, $oldsoname) = ($1, $2);
            print "Checking if Package name line needs update ($line)\n"
                if ($verbose);
	    print "Old soname is $oldsoname, new soname is $soname\n"
                if ($verbose);
            if ($oldsoname ne '' && $soname != int($oldsoname))
            {
                $line =~s/^(Package:\s*lib$pkgmeta->{NATIVE_NAME})(\d+)$/$oldname$soname/;
                print "new line ($line)\n" if ($verbose);
                $changed = 1;
            }
        }
        elsif ($line =~ /^Build-Depends:/)
        {
            my @dependencies;

            @dependencies = split(/: |, /, $line);

            # Skip "Build-Depends: " token
            shift(@dependencies);

            for my $dep (@dependencies)
            {
                if ($dep =~ m/^(?!lib)(\S+?)(-admin|-dbg|-dev|-doc|-progs|-server)?\s*(\((.*)\))/)
                {
                    # Handle the suffix-only case
                    my ($basename, $suffix, $dependency_pred) = ($1, $2, $4);

                    # if there's a dependency on $basename and a (>= $version)
                    # associated with that dependency, update the $version
                    # part to match the GPT dependency for that package
                    if ($pkgmeta->{DEPS}->{$basename}
                        && $dependency_pred)
                    {
                        print "GPT dependency is for "
                            . $pkgmeta->{DEPS}->{$basename}
                            . "\n" if ($verbose);
                        if ($dependency_pred =~ m/>=\s*([0-9\.]+)/)
                        {
                            my $newdep;
                            $newdep = "$basename$suffix ("
                                . $pkgmeta->{DEPS}->{$basename}
                                . ")";

                            if ($newdep ne $dep)
                            {
                                $dep = $newdep;
                                $changed = 1;
                            }
                        }

                    }
                }
                elsif ($dep =~
                    m/^lib([a-z-]+)([0-9]+)?(-dev)(\s*\(>=\s*([0-9.]+)\))$/)
                {
                    # Handle the library case (maybe with soname and -dev
                    # suffix)
                    my ($libname, $soname, $dev, $depver) = ($1, $2, $3, $5);
                    my ($newsoname, $newdepver);
                    my ($newdep, $thischanged);
                    print "Checking if dependency on lib$libname$soname$dev "
                        . "$depver needs update\n" if ($verbose);
                    print "Depends on lib$libname$dev "
                        . $pkgmeta->{DEPS}->{$libname}
                        . "\n" if ($verbose);

                    # If the dependency has either a soname appended to the
                    # library name or a (>= $version), compare them to 
                    # the GPT package dependency version and soname for the 
                    # package
                    $newdepver = $pkgmeta->{DEPS}->{$libname};
                    $newdepver =~ s/>=\s*//;
                    $newsoname = $allpkgmeta->{$libname}->{SONAME};
                    if (defined($depver) && ($depver ne $newdepver))
                    {
                        $depver = $newdepver;
                        $thischanged = 1;
                    }
                    if ($soname && $soname ne $newsoname)
                    {
                        $soname = $newsoname;
                        $thischanged = 1;
                    }

                    if ($thischanged)
                    {
                        $dep = "lib$libname$soname$dev"
                            . ($depver ? " (>= $depver)" : "");
                        $changed = 1;
                    }
                }
            }
            # Combine the dependencies back into a single line
            $line = "Build-Depends: " . join(", ", @dependencies);
        }
        elsif ($line =~ m/^Depends:/)
        {
            # Depends:
            #    This package might have a runtime dependence on a package
            #    whose version has changed. The name might be mangled with the
            #    addition of a suffix:
            #        -admin | -dbg | -dev | -doc | -progs | -server
            #    or with addition of prefix + suffix
            #        lib PKGNAME -dev
            #    or with addition of prefix + suffix
            #        lib PKGNAME SONAME
            my @dependencies;

            @dependencies = split(/: |, /, $line);

            # Skip "Depends: " token
            shift(@dependencies);

            for my $dep (@dependencies)
            {
                if ($dep =~ m/^(?!lib)(\S+?)(-admin|-dbg|-dev|-doc|-progs|-server)?\s*(\((.*)\))/)
                {
                    my ($basename, $suffix, $dependency_pred) = ($1, $2, $4);

                    if ($pkgmeta->{DEPS}{$basename} && $dependency_pred)
                    {
                        if ($dependency_pred =~ m/>=\s*([0-9\.]+)/)
                        {
                            my $newdep;
                            $newdep = "$basename$suffix (>= " . $pkgmeta->{DEPSUNTYPED}->{deb}{$basename}
                                . ")";

                            if ($newdep ne $dep)
                            {
                                $dep = $newdep;
                                $changed = 1;
                            }
                        }

                    }
                }
                elsif ($dep =~
                    m/^lib([a-z-]+)([0-9]+)?(-dev)?(\s* \(([<>=]+) ([^)]+)\))?$/)
                {
                    my ($basedep, $basedepsoname, $dev, $op, $depver) =
                        ($1, $2, $3, $5, $6);
                    my $newdep;
                    if ($basedep ne '')
                    {
                        if (exists $allpkgmeta->{$basedep}->{SONAME})
                        {
                            $basedepsoname = $allpkgmeta->{$basedep}->{SONAME};
                        }
                    }
                    if ($depver ne '' && $depver =~ m/[0-9.]+/)
                    {
                        $depver = $pkgmeta->{DEPSUNTYPED}->{deb}{$basedep};
                    }
                    $newdep = "lib$basedep" . ($basedepsoname ne ''?$basedepsoname:"")
                            . $dev . ($depver?" ($op $depver)" : "");
                    if ($newdep ne $dep)
                    {
                        $dep = $newdep;
                        $changed = 1;
                    }
                }
            }
            $line = "Depends: " . join(", ", @dependencies);
        }
    }
    if ($changed)
    {
        open($fd, ">$controlpath") || return 0;
        for my $line (@old_control)
        {
            print $fd "$line\n";
        }
        close($fd);
        if ($stage) {
            system("git add $controlpath");
        }
    }
    return $changed;
}

sub update_copyright
{
    my ($pkgmeta, $allpkgmeta) = @_;
    my $crpath = "$topdir/debian/$pkgmeta->{NATIVE_NAME}/debian/copyright";
    my $changed = 0;
    my $fd;
    my @old_cr;
    my $in_description = 0;

    open($fd, "<$crpath") || return 0;
    @old_cr=<$fd>;
    close($fd);

    for my $line (@old_cr)
    {
        chomp($line);
        if ($line =~ m/^Source:/)
        {
            my $oldsource;
            my $newsource;
            ($_, $oldsource) = split(/:\s*/, $line, 2);
            $newsource = $oldsource;
            if ($oldsource =~ m!http://www(-unix)?.globus.org!) {
                $newsource = $package_root . "/" . $pkgmeta->{TARBALL};
            }

            if ($newsource ne $oldsource)
            {
                print "changed source URL in $line\n" if ($verbose);
                $changed = 1;
                $line = "Source: $newsource\n";
            }
        }
    }
    if ($changed)
    {
        open($fd, ">$crpath") || return 0;
        for my $line (@old_cr)
        {
            print $fd "$line\n";
        }
        close($fd);
        if ($stage) {
            system("git add $crpath");
        }
    }
    return $changed;
}

sub update_rules
{
    my ($pkgmeta) = @_;
    my ($package) = $pkgmeta->{NATIVE_NAME};
    my ($version) = $pkgmeta->{VERSION};
    my ($soname) = $pkgmeta->{SONAME};
    my $rulespath = "$topdir/debian/$package/debian/rules";
    my $fd;
    my @oldrules;
    my $changed = 0;

    open($fd, "<$rulespath") || return $changed;
    @oldrules = <$fd>;
    close($fd);

    open($fd, ">$rulespath.new") || return $changed;

    for my $line (@oldrules)
    {
        if ($line =~ m|^soname\s*=\s*(\d+)| && $1 ne $soname)
        {
            $line =~ s|^(soname\s*=\s*)(\d+)|$1$soname|;
            $changed = 1;
        }
        elsif ($line =~ m|^version\s*=\s*([0-9\.]+)| && $1 ne $version)
        {
            $line =~ s|^(version\s*=\s*)([0-9\.]+)|$1$version|;
            $changed = 1;
        }
        print $fd $line;
    }

    if ($changed && !$dryrun)
    {
        print "rules file $rulespath changed\n";
        rename "$rulespath.new", $rulespath;
        if ($stage) {
            system("git add $rulespath");
        }
    }
    else
    {
        unlink "$rulespath.new";
    }

    return $changed;
}
sub check_if_version_is_different
{
    my $pkgmeta = shift;
    my $package = $pkgmeta->{NATIVE_NAME};
    my $version = $pkgmeta->{VERSION};
    my $old_version;
    my @oldchanges;
    my $fd;
    my $changelogpath = "$topdir/debian/$package/debian/changelog.in";
    my $update;

    open($fd, "<$changelogpath") || return 0;
    @oldchanges = <$fd>;
    close($fd);

    if ($oldchanges[0] =~ /\S\s+\(([0-9.]*)-.*\)/)
    {
        $old_version = $1;
        if ($old_version ne $version)
        {
            return 1;
        }
    }
    return 0;
}

sub check_if_debian_metadata_changed
{
    my $pkgmeta = shift;
    my $package = $pkgmeta->{NATIVE_NAME};
    my $debianpath = "$topdir/debian/$package/debian";
    my $status;

    open($status, "git log --format=oneline origin..HEAD -- $debianpath|") || return 0;

    while (<$status>)
    {
        if (/./) {
            return 1;
        }
    }

    return 0;
}

sub update_changelog
{
    my $pkgmeta = $_[0];
    my $package = $pkgmeta->{NATIVE_NAME};
    my $version = $pkgmeta->{VERSION};
    my @oldchanges;
    my $fd;
    my $changelogpath = "$topdir/debian/$package/debian/changelog.in";
    my $update;
    my $release = 1;

    open($fd, "<$changelogpath") || return 0;
    @oldchanges = <$fd>;
    close($fd);

    if ($oldchanges[0] =~ /\(([0-9\.]+)-([^)]*)\)/)
    {
        my ($oldversion, $oldrelease) = ($1, $2);
        $oldrelease =~ m/([0-9\.]+).*/;
        my ($oldreleasever) = $1;

        if ($oldversion eq $version)
        {
            $release = sprintf("%d+gt6.\@distro\@", int($oldreleasever) + 1);
        }
        else
        {
            $release = "1+gt6.\@distro\@";
        }
    }

    $update = "$package ($version-$release) \@distro\@; urgency=low\n\n";

    if ($git_changelog)
    {
        my %issues = ();
        my $pkgdatadir = $pkgmeta->{PACKAGE_DIR};

        foreach (split(/\n/, `git log --format=oneline origin/globus_6_branch..HEAD -- $pkgdatadir`)) {
            $_ = (split(/ /, $_, 2))[1];
            $issues{$_} = 1;
        }
        $changelog = join("\n", sort(keys %issues), "");
        if ($changelog eq '')
        {
            $changelog = undef;
        }
    }
    elsif ($prompt_for_changelog)
    {
        print "Changelog Entry for $package [empty line to end]: ";
        $changelog = "";
        while (<>)
        {
            if ($_ eq "\n")
            {
                last;
            }
            $changelog .= "$_";
        }
    }

    for my $line (split(/\n/, $changelog))
    {
        $update .= "  * $line\n";
    }
    $update .= "\n -- Globus Toolkit <support\@globus.org>  "
            . strftime("%a, %d %b %Y %H:%M:%S %z\n\n", localtime);

    if (!$dryrun)
    {
        print "Changelog file $changelogpath has been updated\n";
        open($fd, ">$changelogpath");
        print $fd $update;
        print $fd join('', @oldchanges);
        close($fd);
        if ($stage) {
            system("git add $changelogpath");
        }
    }
    return 1;
}


#MAIN
GetOptions('package=s' => \$package,
           'verbose' => \$verbose,
           'dryrun|n' => \$dryrun,
           'changelog=s' => \$changelog,
           'prompt-for-changelog' => \$prompt_for_changelog,
           'git-changelog' => \$git_changelog,
           'bumprelease' => \$bumprelease,
           'update' => \$update,
           'stage' => \$stage,
           'help' => \$help);

Pod::Usage::pod2usage() if defined $help;

setlocale(LC_TIME, 'C');

$package =~ s/_/-/g if $package;

open(PKG, "sed -ne '/-all_SUBDIR *=/s/-all_SUBDIR *= */    /gp' '$topdir/../configure'|");
while ( <PKG> )
{
    chomp;
    s/#.*//;
    next if ($_ eq '');

    my ($pkg, $subdir) = split(' ', $_, 2);
    $packagelist{$pkg} = $subdir;
}

foreach my $package_name (keys %packagelist)
{
    my $pkgmeta = parse_package($packagelist{$package_name});
    
    $allpkgmeta->{$pkgmeta->{NATIVE_NAME}} = $pkgmeta;
}

# Update debian and rpm package metadata for our desired packages
foreach my $pkgname (keys %{$allpkgmeta})
{
    if ((!$package) || $pkgname eq $package) {
        update_debian($pkgname, $allpkgmeta);
        update_rpm($pkgname, $allpkgmeta);
    }
}

__END__

=head1 NAME

B<rectify-versions> - Rectify package versions from GPT metadata

=head1 SYNOPSIS

B<rectify-versions> [options] 

Options:

=over

=item B<-package> package

The package name to update

=item B<-verbose> 

Output info about each spec file being considered instead of just those changed.

=item B<-release> GT-RELEASE-VERSION

Update the source URL to the source directory for the GT-RELEASE-VERSION

=item B<-changelog> MESSAGE

Use MESSAGE as the changelog message, instead of the default [Updated version numbers]

=item B<-prompt-for-changelog>

Print a prompt to enter the changelog for each package that is modified

=item B<-git-changelog>

Use GIT logs to guess changelog value. Looks for strings that contain
a jira issue name at the beginning of the line since the last patch release
of the Globus Toolkit.

=item B<-bumprelease>

Increase the package release number and update the changelog, even if nothing
has changed in the GPT metadata.

=item B<-update>

Describe this is an update package in the default changelog entry.

=item B<-dryrun>

Print which files would be modified, but don't actually change them.
